
package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import frc.robot.Constants.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.button.Trigger;
import frc.robot.subsystems.*;

// Evan added some imports
import java.util.function.BooleanSupplier;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

  private static RobotContainer robotContainer = new RobotContainer();

  // The robot's subsystems
  public final IntakeArms intakeArms = new IntakeArms();
  public final Conveyor conveyor = new Conveyor();
  public final IntakeRollers intakeRollers = new IntakeRollers();
  public final Drive drive = new Drive();
  public final boolean isPrecisionOn = false;
  public final PrecisionToggle precision = new PrecisionToggle(drive, isPrecisionOn);

  // Joysticks
  private final XboxController operatorController = new XboxController(1);
  private final XboxController driveController = new XboxController(0);

  // A chooser for autonomous commands
  SendableChooser<Command> chooser = new SendableChooser<>();

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {

    // Smartdashboard Subsystems

    initializePneumatics();

    SmartDashboard.putData(intakeArms);

    SmartDashboard.putData(drive);

    // SmartDashboard Buttons
    SmartDashboard.putData("AutonomousCommand", new AutonomousCommand());
    SmartDashboard.putData("DriveCommand",
        new DriveCommand(() -> DriveConstants.DRIVE_FULL_SPEED, () -> DriveConstants.TURN_RADIUS));
    SmartDashboard.putData("RaiseIntakeCommand", new RaiseIntakeCommand(intakeArms));
    SmartDashboard.putData("LowerIntakeCommand", new LowerIntakeCommand(intakeArms));
    SmartDashboard.putData("TurnConveyorCommand",
        new TurnConveyorCommand(MotorConstants.CONVEYOR_FULL_SPEED, conveyor));
    SmartDashboard.putData("IntakeCommand", new IntakeCommand(intakeRollers));
    SmartDashboard.putData("PrecisionToggle", new PrecisionToggle(drive, isPrecisionOn));

    configureButtonBindings();

    // Configure default commands

    drive.setDefaultCommand(new DriveCommand(() -> DriveConstants.DRIVE_FULL_SPEED, () -> DriveConstants.TURN_RADIUS));

    // Configure autonomous sendable chooser

    SmartDashboard.putData("Auto Mode", chooser);
  }

  // Used to start compressor
  private void initializePneumatics() {
    try (Compressor pcmCompressor = new Compressor(0, PneumaticsModuleType.CTREPCM)) {
      pcmCompressor.enableDigital();
      System.out.println("Compressor Initialized? " + pcmCompressor.isEnabled());
    }
  }

  public static RobotContainer getInstance() {
    return robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {

    final JoystickButton precisionControlButton = new JoystickButton(driveController, XboxController.Button.kY.value);

    precisionControlButton.toggleOnTrue(new PrecisionToggle(drive, PrecisionToggle.precisionToggle)
        .withInterruptBehavior(InterruptionBehavior.kCancelSelf));
    SmartDashboard.putData("PrecisionControlButton", new PrecisionToggle(drive, false));

    final JoystickButton velocityStick = new JoystickButton(driveController, XboxController.Button.kLeftStick.value);

    velocityStick.onTrue(new DriveCommand(() -> DriveConstants.DRIVE_FULL_SPEED, () -> DriveConstants.TURN_RADIUS)
        .withInterruptBehavior(InterruptionBehavior.kCancelSelf));
    SmartDashboard.putData("VelocityStick",
        new DriveCommand(() -> DriveConstants.DRIVE_FULL_SPEED, () -> DriveConstants.TURN_RADIUS));

    final JoystickButton turnStick = new JoystickButton(driveController, XboxController.Button.kRightStick.value);

    turnStick.onTrue(new DriveCommand(() -> DriveConstants.DRIVE_FULL_SPEED, () -> DriveConstants.TURN_RADIUS)
        .withInterruptBehavior(InterruptionBehavior.kCancelSelf));
    SmartDashboard.putData("TurnStick",
        new DriveCommand(() -> DriveConstants.DRIVE_FULL_SPEED, () -> DriveConstants.TURN_RADIUS));

    final JoystickButton forwardIntakeButton = new JoystickButton(operatorController,
        XboxController.Button.kRightBumper.value);

    forwardIntakeButton
        .onTrue(new IntakeCommand(intakeRollers).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
    SmartDashboard.putData("ForwardIntakeButton", new IntakeCommand(intakeRollers));

    final JoystickButton reverseIntakeButton = new JoystickButton(operatorController,
        XboxController.Button.kLeftBumper.value);

    reverseIntakeButton
        .onTrue(new IntakeCommand(intakeRollers).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
    SmartDashboard.putData("ReverseIntakeButton", new IntakeCommand(intakeRollers));

    final JoystickButton raiseIntakeButton = new JoystickButton(operatorController, XboxController.Button.kY.value);

    raiseIntakeButton
        .onTrue(new RaiseIntakeCommand(intakeArms).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
    SmartDashboard.putData("RaiseIntakeButton", new RaiseIntakeCommand(intakeArms));

    final JoystickButton lowerIntakeButton = new JoystickButton(operatorController, XboxController.Button.kA.value);

    lowerIntakeButton
        .onTrue(new LowerIntakeCommand(intakeArms).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
    SmartDashboard.putData("LowerIntakeButton", new LowerIntakeCommand(intakeArms));

    final Trigger forwardConveyorButton = new Trigger(() -> driveController
        .getRawAxis(XboxController.Axis.kRightTrigger.value) > ControlConstants.SHOOT_TRIGGER_THRESHOLD);
    forwardConveyorButton.whileTrue(new TurnConveyorCommand(0, conveyor));

    forwardConveyorButton
        .onTrue(new TurnConveyorCommand(0, conveyor).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
    SmartDashboard.putData("ForwardConveyorButton", new TurnConveyorCommand(0, conveyor));

    final Trigger reverseConveyorButton = new Trigger(() -> driveController
        .getRawAxis(XboxController.Axis.kLeftTrigger.value) > ControlConstants.SHOOT_TRIGGER_THRESHOLD);
    forwardConveyorButton.whileTrue(new TurnConveyorCommand(0, conveyor));

    reverseConveyorButton
        .onTrue(new TurnConveyorCommand(0, conveyor).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
    SmartDashboard.putData("ReverseConveyorButton", new TurnConveyorCommand(0, conveyor));

  }

  public XboxController getDriveController() {
    return driveController;
  }

  public XboxController getoperatorController() {
    return operatorController;
  }

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return chooser.getSelected();
  }

}
