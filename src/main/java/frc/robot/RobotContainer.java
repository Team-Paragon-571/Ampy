// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final IntakeArms m_intakeArms = new IntakeArms();
    public final Conveyor m_conveyor = new Conveyor();
    public final IntakeRollers m_intakeRollers = new IntakeRollers();
    public final Drive m_drive = new Drive();

// Joysticks
private final XboxController operatorControlller = new XboxController(1);
private final XboxController driveController = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems
    SmartDashboard.putData(m_drive);


    // SmartDashboard Buttons
    SmartDashboard.putData("AutonomousCommand", new AutonomousCommand());
    SmartDashboard.putData("DriveCommand", new DriveCommand());
    SmartDashboard.putData("RaiseIntakeCommand", new RaiseIntakeCommand( m_intakeArms ));
    SmartDashboard.putData("LowerIntakeCommand", new LowerIntakeCommand( m_intakeArms ));
    SmartDashboard.putData("TurnConveyorCommand", new TurnConveyorCommand( m_conveyor ));
    SmartDashboard.putData("IntakeCommand", new IntakeCommand( m_intakeRollers ));
    SmartDashboard.putData("PrecisionToggle", new PrecisionToggle( m_drive ));

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_drive.setDefaultCommand(new DriveCommand());


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("$command.getName()", new ${name.replace(' ', '')}( m_${name.substring(0,1).toLowerCase()}${name.substring(1).replace(' ', '')} ));

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton precisionControlButton = new JoystickButton(driveController, XboxController.Button.kY.value);        
precisionControlButton.toggleOnTrue(new PrecisionToggle(0, m_drive).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("PrecisionControlButton",new PrecisionToggle(0, m_drive));
                        
final JoystickButton velocityStick = new JoystickButton(driveController, XboxController.Button.kLeftStick.value);        
velocityStick.onTrue(new DriveCommand().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("VelocityStick",new DriveCommand());
                        
final JoystickButton turnStick = new JoystickButton(driveController, XboxController.Button.kRightStick.value);        
turnStick.onTrue(new DriveCommand().withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("TurnStick",new DriveCommand());
                        
final JoystickButton forwardIntakeButton = new JoystickButton(operatorControlller, XboxController.Button.kRightBumper.value);        
forwardIntakeButton.onTrue(new IntakeCommand(0, m_intakeRollers).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("ForwardIntakeButton",new IntakeCommand(0, m_intakeRollers));
                        
final JoystickButton reverseIntakeButton = new JoystickButton(operatorControlller, XboxController.Button.kLeftBumper.value);        
reverseIntakeButton.onTrue(new IntakeCommand(0, m_intakeRollers).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("ReverseIntakeButton",new IntakeCommand(0, m_intakeRollers));
                        
final JoystickButton forwardConveyorButton = new JoystickButton(operatorControlller, XboxController.Button.kX.value);        
forwardConveyorButton.onTrue(new TurnConveyorCommand(0, m_conveyor).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("ForwardConveyorButton",new TurnConveyorCommand(0, m_conveyor));
                        
final JoystickButton reverseConveyorButton = new JoystickButton(operatorControlller, XboxController.Button.kB.value);        
reverseConveyorButton.onTrue(new TurnConveyorCommand(0, m_conveyor).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("ReverseConveyorButton",new TurnConveyorCommand(0, m_conveyor));
                        
final JoystickButton raiseIntakeButton = new JoystickButton(operatorControlller, XboxController.Button.kY.value);        
raiseIntakeButton.onTrue(new RaiseIntakeCommand( m_intakeArms ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("RaiseIntakeButton",new RaiseIntakeCommand( m_intakeArms ));
                        
final JoystickButton lowerIntakeButton = new JoystickButton(operatorControlller, XboxController.Button.kA.value);        
lowerIntakeButton.onTrue(new LowerIntakeCommand( m_intakeArms ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("LowerIntakeButton",new LowerIntakeCommand( m_intakeArms ));
                        


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getDriveController() {
      return driveController;
    }

public XboxController getOperatorControlller() {
      return operatorControlller;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

